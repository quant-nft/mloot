// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mloot

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TemporalLootABI is the input ABI used to generate the binding from.
const TemporalLootABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getChest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFoot\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNeck\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWaist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TemporalLootBin is the compiled bytecode used for deploying new contracts.
var TemporalLootBin = ""

// DeployTemporalLoot deploys a new Ethereum contract, binding an instance of TemporalLoot to it.
func DeployTemporalLoot(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TemporalLoot, error) {
	parsed, err := abi.JSON(strings.NewReader(TemporalLootABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TemporalLootBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TemporalLoot{TemporalLootCaller: TemporalLootCaller{contract: contract}, TemporalLootTransactor: TemporalLootTransactor{contract: contract}, TemporalLootFilterer: TemporalLootFilterer{contract: contract}}, nil
}

// TemporalLoot is an auto generated Go binding around an Ethereum contract.
type TemporalLoot struct {
	TemporalLootCaller     // Read-only binding to the contract
	TemporalLootTransactor // Write-only binding to the contract
	TemporalLootFilterer   // Log filterer for contract events
}

// TemporalLootCaller is an auto generated read-only Go binding around an Ethereum contract.
type TemporalLootCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TemporalLootTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TemporalLootTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TemporalLootFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TemporalLootFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TemporalLootSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TemporalLootSession struct {
	Contract     *TemporalLoot     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TemporalLootCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TemporalLootCallerSession struct {
	Contract *TemporalLootCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TemporalLootTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TemporalLootTransactorSession struct {
	Contract     *TemporalLootTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TemporalLootRaw is an auto generated low-level Go binding around an Ethereum contract.
type TemporalLootRaw struct {
	Contract *TemporalLoot // Generic contract binding to access the raw methods on
}

// TemporalLootCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TemporalLootCallerRaw struct {
	Contract *TemporalLootCaller // Generic read-only contract binding to access the raw methods on
}

// TemporalLootTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TemporalLootTransactorRaw struct {
	Contract *TemporalLootTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTemporalLoot creates a new instance of TemporalLoot, bound to a specific deployed contract.
func NewTemporalLoot(address common.Address, backend bind.ContractBackend) (*TemporalLoot, error) {
	contract, err := bindTemporalLoot(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TemporalLoot{TemporalLootCaller: TemporalLootCaller{contract: contract}, TemporalLootTransactor: TemporalLootTransactor{contract: contract}, TemporalLootFilterer: TemporalLootFilterer{contract: contract}}, nil
}

// NewTemporalLootCaller creates a new read-only instance of TemporalLoot, bound to a specific deployed contract.
func NewTemporalLootCaller(address common.Address, caller bind.ContractCaller) (*TemporalLootCaller, error) {
	contract, err := bindTemporalLoot(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TemporalLootCaller{contract: contract}, nil
}

// NewTemporalLootTransactor creates a new write-only instance of TemporalLoot, bound to a specific deployed contract.
func NewTemporalLootTransactor(address common.Address, transactor bind.ContractTransactor) (*TemporalLootTransactor, error) {
	contract, err := bindTemporalLoot(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TemporalLootTransactor{contract: contract}, nil
}

// NewTemporalLootFilterer creates a new log filterer instance of TemporalLoot, bound to a specific deployed contract.
func NewTemporalLootFilterer(address common.Address, filterer bind.ContractFilterer) (*TemporalLootFilterer, error) {
	contract, err := bindTemporalLoot(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TemporalLootFilterer{contract: contract}, nil
}

// bindTemporalLoot binds a generic wrapper to an already deployed contract.
func bindTemporalLoot(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TemporalLootABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TemporalLoot *TemporalLootRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TemporalLoot.Contract.TemporalLootCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TemporalLoot *TemporalLootRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TemporalLoot.Contract.TemporalLootTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TemporalLoot *TemporalLootRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TemporalLoot.Contract.TemporalLootTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TemporalLoot *TemporalLootCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TemporalLoot.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TemporalLoot *TemporalLootTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TemporalLoot.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TemporalLoot *TemporalLootTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TemporalLoot.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TemporalLoot *TemporalLootCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TemporalLoot *TemporalLootSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TemporalLoot.Contract.BalanceOf(&_TemporalLoot.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TemporalLoot *TemporalLootCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TemporalLoot.Contract.BalanceOf(&_TemporalLoot.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TemporalLoot *TemporalLootCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TemporalLoot *TemporalLootSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TemporalLoot.Contract.GetApproved(&_TemporalLoot.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TemporalLoot *TemporalLootCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TemporalLoot.Contract.GetApproved(&_TemporalLoot.CallOpts, tokenId)
}

// GetChest is a free data retrieval call binding the contract method 0xef68075a.
//
// Solidity: function getChest(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetChest(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getChest", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetChest is a free data retrieval call binding the contract method 0xef68075a.
//
// Solidity: function getChest(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetChest(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetChest(&_TemporalLoot.CallOpts, tokenId)
}

// GetChest is a free data retrieval call binding the contract method 0xef68075a.
//
// Solidity: function getChest(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetChest(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetChest(&_TemporalLoot.CallOpts, tokenId)
}

// GetFoot is a free data retrieval call binding the contract method 0x0e99990d.
//
// Solidity: function getFoot(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetFoot(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getFoot", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetFoot is a free data retrieval call binding the contract method 0x0e99990d.
//
// Solidity: function getFoot(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetFoot(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetFoot(&_TemporalLoot.CallOpts, tokenId)
}

// GetFoot is a free data retrieval call binding the contract method 0x0e99990d.
//
// Solidity: function getFoot(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetFoot(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetFoot(&_TemporalLoot.CallOpts, tokenId)
}

// GetHand is a free data retrieval call binding the contract method 0xd47f269e.
//
// Solidity: function getHand(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetHand(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getHand", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetHand is a free data retrieval call binding the contract method 0xd47f269e.
//
// Solidity: function getHand(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetHand(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetHand(&_TemporalLoot.CallOpts, tokenId)
}

// GetHand is a free data retrieval call binding the contract method 0xd47f269e.
//
// Solidity: function getHand(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetHand(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetHand(&_TemporalLoot.CallOpts, tokenId)
}

// GetHead is a free data retrieval call binding the contract method 0x9720c969.
//
// Solidity: function getHead(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetHead(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getHead", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetHead is a free data retrieval call binding the contract method 0x9720c969.
//
// Solidity: function getHead(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetHead(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetHead(&_TemporalLoot.CallOpts, tokenId)
}

// GetHead is a free data retrieval call binding the contract method 0x9720c969.
//
// Solidity: function getHead(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetHead(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetHead(&_TemporalLoot.CallOpts, tokenId)
}

// GetNeck is a free data retrieval call binding the contract method 0x67209aa8.
//
// Solidity: function getNeck(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetNeck(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getNeck", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetNeck is a free data retrieval call binding the contract method 0x67209aa8.
//
// Solidity: function getNeck(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetNeck(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetNeck(&_TemporalLoot.CallOpts, tokenId)
}

// GetNeck is a free data retrieval call binding the contract method 0x67209aa8.
//
// Solidity: function getNeck(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetNeck(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetNeck(&_TemporalLoot.CallOpts, tokenId)
}

// GetRing is a free data retrieval call binding the contract method 0xc08a5dd5.
//
// Solidity: function getRing(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetRing(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getRing", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetRing is a free data retrieval call binding the contract method 0xc08a5dd5.
//
// Solidity: function getRing(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetRing(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetRing(&_TemporalLoot.CallOpts, tokenId)
}

// GetRing is a free data retrieval call binding the contract method 0xc08a5dd5.
//
// Solidity: function getRing(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetRing(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetRing(&_TemporalLoot.CallOpts, tokenId)
}

// GetWaist is a free data retrieval call binding the contract method 0x9bdc1b69.
//
// Solidity: function getWaist(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetWaist(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getWaist", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetWaist is a free data retrieval call binding the contract method 0x9bdc1b69.
//
// Solidity: function getWaist(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetWaist(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetWaist(&_TemporalLoot.CallOpts, tokenId)
}

// GetWaist is a free data retrieval call binding the contract method 0x9bdc1b69.
//
// Solidity: function getWaist(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetWaist(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetWaist(&_TemporalLoot.CallOpts, tokenId)
}

// GetWeapon is a free data retrieval call binding the contract method 0x9e41b73f.
//
// Solidity: function getWeapon(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) GetWeapon(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "getWeapon", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetWeapon is a free data retrieval call binding the contract method 0x9e41b73f.
//
// Solidity: function getWeapon(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) GetWeapon(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetWeapon(&_TemporalLoot.CallOpts, tokenId)
}

// GetWeapon is a free data retrieval call binding the contract method 0x9e41b73f.
//
// Solidity: function getWeapon(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) GetWeapon(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.GetWeapon(&_TemporalLoot.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TemporalLoot *TemporalLootCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TemporalLoot *TemporalLootSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TemporalLoot.Contract.IsApprovedForAll(&_TemporalLoot.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TemporalLoot *TemporalLootCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TemporalLoot.Contract.IsApprovedForAll(&_TemporalLoot.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TemporalLoot *TemporalLootCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TemporalLoot *TemporalLootSession) Name() (string, error) {
	return _TemporalLoot.Contract.Name(&_TemporalLoot.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) Name() (string, error) {
	return _TemporalLoot.Contract.Name(&_TemporalLoot.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TemporalLoot *TemporalLootCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TemporalLoot *TemporalLootSession) Owner() (common.Address, error) {
	return _TemporalLoot.Contract.Owner(&_TemporalLoot.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TemporalLoot *TemporalLootCallerSession) Owner() (common.Address, error) {
	return _TemporalLoot.Contract.Owner(&_TemporalLoot.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TemporalLoot *TemporalLootCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TemporalLoot *TemporalLootSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TemporalLoot.Contract.OwnerOf(&_TemporalLoot.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TemporalLoot *TemporalLootCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TemporalLoot.Contract.OwnerOf(&_TemporalLoot.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TemporalLoot *TemporalLootCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TemporalLoot *TemporalLootSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TemporalLoot.Contract.SupportsInterface(&_TemporalLoot.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TemporalLoot *TemporalLootCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TemporalLoot.Contract.SupportsInterface(&_TemporalLoot.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TemporalLoot *TemporalLootCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TemporalLoot *TemporalLootSession) Symbol() (string, error) {
	return _TemporalLoot.Contract.Symbol(&_TemporalLoot.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) Symbol() (string, error) {
	return _TemporalLoot.Contract.Symbol(&_TemporalLoot.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_TemporalLoot *TemporalLootCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_TemporalLoot *TemporalLootSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _TemporalLoot.Contract.TokenByIndex(&_TemporalLoot.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_TemporalLoot *TemporalLootCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _TemporalLoot.Contract.TokenByIndex(&_TemporalLoot.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_TemporalLoot *TemporalLootCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_TemporalLoot *TemporalLootSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _TemporalLoot.Contract.TokenOfOwnerByIndex(&_TemporalLoot.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_TemporalLoot *TemporalLootCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _TemporalLoot.Contract.TokenOfOwnerByIndex(&_TemporalLoot.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.TokenURI(&_TemporalLoot.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TemporalLoot *TemporalLootCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TemporalLoot.Contract.TokenURI(&_TemporalLoot.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TemporalLoot *TemporalLootCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TemporalLoot.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TemporalLoot *TemporalLootSession) TotalSupply() (*big.Int, error) {
	return _TemporalLoot.Contract.TotalSupply(&_TemporalLoot.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_TemporalLoot *TemporalLootCallerSession) TotalSupply() (*big.Int, error) {
	return _TemporalLoot.Contract.TotalSupply(&_TemporalLoot.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.Approve(&_TemporalLoot.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.Approve(&_TemporalLoot.TransactOpts, to, tokenId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactor) Claim(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "claim", tokenId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootSession) Claim(tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.Claim(&_TemporalLoot.TransactOpts, tokenId)
}

// Claim is a paid mutator transaction binding the contract method 0x379607f5.
//
// Solidity: function claim(uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactorSession) Claim(tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.Claim(&_TemporalLoot.TransactOpts, tokenId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TemporalLoot *TemporalLootTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TemporalLoot *TemporalLootSession) RenounceOwnership() (*types.Transaction, error) {
	return _TemporalLoot.Contract.RenounceOwnership(&_TemporalLoot.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TemporalLoot *TemporalLootTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TemporalLoot.Contract.RenounceOwnership(&_TemporalLoot.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.SafeTransferFrom(&_TemporalLoot.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.SafeTransferFrom(&_TemporalLoot.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_TemporalLoot *TemporalLootTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_TemporalLoot *TemporalLootSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _TemporalLoot.Contract.SafeTransferFrom0(&_TemporalLoot.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_TemporalLoot *TemporalLootTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _TemporalLoot.Contract.SafeTransferFrom0(&_TemporalLoot.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TemporalLoot *TemporalLootTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TemporalLoot *TemporalLootSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TemporalLoot.Contract.SetApprovalForAll(&_TemporalLoot.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TemporalLoot *TemporalLootTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TemporalLoot.Contract.SetApprovalForAll(&_TemporalLoot.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.TransferFrom(&_TemporalLoot.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TemporalLoot *TemporalLootTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TemporalLoot.Contract.TransferFrom(&_TemporalLoot.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TemporalLoot *TemporalLootTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TemporalLoot.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TemporalLoot *TemporalLootSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TemporalLoot.Contract.TransferOwnership(&_TemporalLoot.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TemporalLoot *TemporalLootTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TemporalLoot.Contract.TransferOwnership(&_TemporalLoot.TransactOpts, newOwner)
}

// TemporalLootApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TemporalLoot contract.
type TemporalLootApprovalIterator struct {
	Event *TemporalLootApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TemporalLootApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TemporalLootApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TemporalLootApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TemporalLootApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TemporalLootApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TemporalLootApproval represents a Approval event raised by the TemporalLoot contract.
type TemporalLootApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TemporalLoot *TemporalLootFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TemporalLootApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TemporalLoot.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TemporalLootApprovalIterator{contract: _TemporalLoot.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TemporalLoot *TemporalLootFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TemporalLootApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TemporalLoot.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TemporalLootApproval)
				if err := _TemporalLoot.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TemporalLoot *TemporalLootFilterer) ParseApproval(log types.Log) (*TemporalLootApproval, error) {
	event := new(TemporalLootApproval)
	if err := _TemporalLoot.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TemporalLootApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TemporalLoot contract.
type TemporalLootApprovalForAllIterator struct {
	Event *TemporalLootApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TemporalLootApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TemporalLootApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TemporalLootApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TemporalLootApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TemporalLootApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TemporalLootApprovalForAll represents a ApprovalForAll event raised by the TemporalLoot contract.
type TemporalLootApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TemporalLoot *TemporalLootFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TemporalLootApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TemporalLoot.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TemporalLootApprovalForAllIterator{contract: _TemporalLoot.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TemporalLoot *TemporalLootFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TemporalLootApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TemporalLoot.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TemporalLootApprovalForAll)
				if err := _TemporalLoot.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TemporalLoot *TemporalLootFilterer) ParseApprovalForAll(log types.Log) (*TemporalLootApprovalForAll, error) {
	event := new(TemporalLootApprovalForAll)
	if err := _TemporalLoot.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TemporalLootOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TemporalLoot contract.
type TemporalLootOwnershipTransferredIterator struct {
	Event *TemporalLootOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TemporalLootOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TemporalLootOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TemporalLootOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TemporalLootOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TemporalLootOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TemporalLootOwnershipTransferred represents a OwnershipTransferred event raised by the TemporalLoot contract.
type TemporalLootOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TemporalLoot *TemporalLootFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TemporalLootOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TemporalLoot.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TemporalLootOwnershipTransferredIterator{contract: _TemporalLoot.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TemporalLoot *TemporalLootFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TemporalLootOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TemporalLoot.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TemporalLootOwnershipTransferred)
				if err := _TemporalLoot.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TemporalLoot *TemporalLootFilterer) ParseOwnershipTransferred(log types.Log) (*TemporalLootOwnershipTransferred, error) {
	event := new(TemporalLootOwnershipTransferred)
	if err := _TemporalLoot.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TemporalLootTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TemporalLoot contract.
type TemporalLootTransferIterator struct {
	Event *TemporalLootTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TemporalLootTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TemporalLootTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TemporalLootTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TemporalLootTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TemporalLootTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TemporalLootTransfer represents a Transfer event raised by the TemporalLoot contract.
type TemporalLootTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TemporalLoot *TemporalLootFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TemporalLootTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TemporalLoot.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TemporalLootTransferIterator{contract: _TemporalLoot.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TemporalLoot *TemporalLootFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TemporalLootTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TemporalLoot.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TemporalLootTransfer)
				if err := _TemporalLoot.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TemporalLoot *TemporalLootFilterer) ParseTransfer(log types.Log) (*TemporalLootTransfer, error) {
	event := new(TemporalLootTransfer)
	if err := _TemporalLoot.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
